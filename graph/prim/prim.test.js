const { assert, cmpArr } = require('../../util')

const prim = require('./prim')


const Graph = require('../graph')
const Vertex = require('../vertex')
const Edge = require('../edge')

var vA = new Vertex('A')
var vB = new Vertex('B')
var vC = new Vertex('C')
var vD = new Vertex('D')
var vE = new Vertex('E')
var vF = new Vertex('F')
var vG = new Vertex('G')

var eAB = new Edge(vA, vB, 7)
var eAD = new Edge(vA, vD, 5)
var eBC = new Edge(vB, vC, 8)
var eBD = new Edge(vB, vD, 9)
var eBE = new Edge(vB, vE, 7)
var eCE = new Edge(vC, vE, 5)
var eDE = new Edge(vD, vE, 15)
var eDF = new Edge(vD, vF, 6)
var eEF = new Edge(vE, vF, 8)
var eEG = new Edge(vE, vG, 9)
var eFG = new Edge(vF, vG, 11)

var graph = new Graph()
graph.addEdges([eAB, eAD, eBC, eBD, eBE, eCE, eDE, eDF, eEF, eEG, eFG])
var mst = prim(graph)

assert(cmpArr(mst.getNeighbours(vA).map(n => n.key), ['B', 'D']), 'prim test 1 ')
assert(cmpArr(mst.getNeighbours(vD).map(n => n.key), ['A', 'F']), 'prim test 2 ')
assert(cmpArr(mst.getNeighbours(vB).map(n => n.key), ['A', 'E']), 'prim test 3 ')
assert(cmpArr(mst.getNeighbours(vC).map(n => n.key), ['E']), 'prim test 4 ')
assert(cmpArr(mst.getNeighbours(vE).map(n => n.key), ['B', 'C', 'G']), 'prim test 5 ')
assert(cmpArr(mst.getNeighbours(vG).map(n => n.key), ['E']), 'prim test 6 ')
assert(mst.getWeight() == 39, 'prim test 7 ')